# QT框架核心问题
QT基础机制z

QT的信号槽（Signal & Slot）实现原理（元对象系统、moc预处理）。

为什么QT的类需要继承QObject？Q_OBJECT宏的作用是什么？

QT的事件循环（Event Loop）机制，如何自定义事件？

多线程与异步

QT中多线程的几种实现方式（QThread、QtConcurrent、moveToThread）。

信号槽的跨线程通信原理（队列连接QueuedConnection）。

如何避免QT界面线程的卡顿（异步处理耗时任务）？

GUI与组件

QT的绘图机制（QPainter、双缓冲技术）。

自定义控件的实现步骤（继承QWidget并重写paintEvent）。

QT样式表（QSS）的作用及与原生绘图的性能对比。

四、代码调试与优化
调试工具

嵌入式调试经验：JTAG、GDB、内存检测工具（Valgrind）的使用场景。

如何通过日志排查QT界面逻辑问题？

性能问题

分析QT程序界面卡顿的可能原因（如频繁UI更新、阻塞主线程）。

嵌入式系统中如何优化C++代码的CPU和内存占用？

五、设计模式与工程实践
常用设计模式

观察者模式在QT中的应用（信号槽的本质是观察者模式）。

工厂模式在硬件抽象层（HAL）设计中的作用。

项目经验

描述一个用QT实现的复杂界面项目（如自定义控件、多线程交互）。

在嵌入式项目中如何平衡实时性和代码可维护性？

高频代码手撕题
嵌入式相关

实现一个内存池（固定大小块管理）。

位操作：判断一个数是否是2的幂，或统计二进制中1的个数。

QT相关

手写一个简单的信号槽连接示例（伪代码）。

实现线程安全的单例模式（QT环境）。

面试建议
嵌入式方向：重点复习指针、内存管理、硬件交互、实时性优化。

QT方向：深入理解信号槽机制、事件循环、多线程、自定义控件。

结合项目：提前准备硬件驱动开发或QT界面设计的具体案例，突出资源管理和稳定性设计。

如果需要具体问题的代码示例或扩展解释，可以进一步说明！
