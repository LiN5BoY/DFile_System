# 算法相关提问
## 1、字符串相关
##### 1.1 手写strcpy函数
```cpp
#include <iostream>
// <cassert> 是 C++ 标准库中的一个头文件，主要用于提供断言功能。
// 断言是一种用于调试的工具，可以在程序运行时检查某个条件是否为真。
// 如果条件为假，程序会终止并输出错误信息，这有助于开发者在调试过程中发现潜在的问题。
#include <cassert>
char* my_strcpy(char* dest,const char *src)
{
    assert(dest != nullptr && src != nullptr);
    char *ret = dest;
    while ((*dest++ = *src++) != '\0');
    return ret;
}
```
##### 1.2 手写strcat函数
```cpp
#include <iostream>
#include <cassert>
char* my_strcat(char* dest,const char* src)
{
    assert(dest != nullptr && src != nullptr);
    char* ret = dest;
    while (*dest) dest++;
    while ((*dest++ = *src++) != '\0');
    return ret;
}
```
##### 1.3 atoi函数
```cpp
#include <iostream>
#include <cassert>
#include <cctype>
int my_atoi(const char* str)
{
    assert(str != nullptr);
    int num = 0;
    int sign = 1;
    while (isspace(*str)) str++; // 跳过空白字符
    if (*str == '-' || *str == '+')
    {
        sign = (*str == '-') ? -1 : 1;
        str++;
    }
    while (isdigit(*str))
    {
        num = num * 10 + (*str - '0');
        str++;
    }
    return sign * num;
}
```
##### 1.4 统计字符出现次数(使用algorithm)
```cpp
#include <iostream>
#include <algorithm>
#include <string>
int count_char(const std::string& str,char ch)
{
    return std::count(str.begin(),str.end(),ch);
}
```
## 2、算法相关
##### 2.1 二分查找
一般用于在**有序数组**中查找特定元素
时间复杂度：O(log n), 空间复杂度O(1)
```cpp
// 初始化两个指针，left 和 right，分别指向数组的起始位置和结束位置。
// 计算中间位置 mid。
// 比较目标值 target 与中间位置的值：
// 如果相等，返回 mid。
// 如果 target 小于中间位置的值，将 right 移动到 mid - 1。
// 如果 target 大于中间位置的值，将 left 移动到 mid + 1。
// 重复步骤 2 和 3，直到 left 超过 right，表示查找范围为空。
#include <iostream>
#include <vector>
int binary_search(const std::vector<int>& arr,int target)
{
    int left = 0;
    int right = arr.size() - 1;
    
    while (left <= right)
    {
        int mid = left + (right - left) / 2;
        if(arr[mid] == target)
        {
            return mid;
        }
        else if(arr[mid] < target)
        {
            left = mid + 1;

        }
        else
        {
            right = mid - 1;
        }
    }

    return -1; // 没找到目标值
}
```
##### 2.2  反转链表
```cpp
#include <iostream>

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

ListNode* reverseListRecursive(ListNode* head)
{
    if (head == nullptr || head->next == nullptr)
        return head;
    ListNode* p = reverseListRecursive(head->next);
    head->next->next = head;
    head->next = nullptr;
    return p;
}
```
##### 2.3 二叉树相关
二叉搜索树：排序特性 左中右
**还原** 验证数组是否为合法的二叉搜索树
```cpp
#include <iostream>
#include <vector>

bool verifyPostorder(std::vector<int>& postorder, int start, int end)
{
    if(start >= end) return true; // 如果子数组为空或只有一个元素，则返回 true
    
    int root = postorder[end]; // 后序遍历的最后一个元素是根节点
    int i = start;
    // 找到第一个大于根节点的元素位置
    while (i < end && postorder[i] < root) i++;
    int j = i;
    // 检查剩余的元素是否都大于根节点
    while (j < end && postorder[j] > root) j++;

    // 验证左子树和右子树是否也满足后序遍历的特性
    return j == end && verifyPostorder(postorder, start, i - 1) && verifyPostorder(postorder, i, end - 1);
}
```
**要根据前序和中序序列重建二叉树**，可以使用递归的方法。
为了提升效率，本文使用哈希表 hmap 存储中序遍历的值与索引的映射，查找操作的时间复杂度为 O(1) ;
```cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    HashMap<Integer, Integer> map = new HashMap<>();//标记中序遍历
    int[] preorder;//保留的先序遍历，方便递归时依据索引查看先序遍历的值

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        this.preorder = preorder;
        //将中序遍历的值及索引放在map中，方便递归时获取左子树与右子树的数量及其根的索引
        for (int i = 0; i < inorder.length; i++) {
            map.put(inorder[i], i);
        }
        //三个索引分别为
        //当前根的的索引
        //递归树的左边界，即数组左边界
        //递归树的右边界，即数组右边界
        return recur(0,0,inorder.length-1);
    }

    TreeNode recur(int pre_root, int in_left, int in_right){
        if(in_left > in_right) return null;// 相等的话就是自己
        TreeNode root = new TreeNode(preorder[pre_root]);//获取root节点
        int idx = map.get(preorder[pre_root]);//获取在中序遍历中根节点所在索引，以方便获取左子树的数量
        //左子树的根的索引为先序中的根节点+1 
        //递归左子树的左边界为原来的中序in_left
        //递归左子树的右边界为中序中的根节点索引-1
        root.left = recur(pre_root+1, in_left, idx-1);
        //右子树的根的索引为先序中的 当前根位置 + 左子树的数量 + 1
        //递归右子树的左边界为中序中当前根节点+1
        //递归右子树的右边界为中序中原来右子树的边界
        root.right = recur(pre_root + (idx - in_left) + 1, idx+1, in_right);
        return root;

    }

}

```
